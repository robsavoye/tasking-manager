{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Tasking Manager","text":"<p>The most popular tool for teams to coordinate mapping on OpenStreetMap. With this web application, an area of interest can be defined and divided up into smaller tasks that can be completed rapidly. It shows which areas need to be mapped and which areas need a review for quality assurance. You can see the tool in action: log into the widely used HOT Tasking Manager and start mapping.</p> <p>This is Free and Open Source Software. You are welcome to use the code and set up your own instance. The Tasking Manager has been initially designed and built by and for the Humanitarian OpenStreetMap Team, and is nowadays used by many communities and organizations.</p>"},{"location":"#get-involved","title":"Get involved!","text":"<ul> <li>Start by reading our Code of conduct</li> <li>Get familiar with our contributor guidelines explaining the different ways in which you can support this project! We need your help!</li> <li>Join the Tasking Manager Collective Meet up - an opportunity to meet other Tasking Manager contributors. The meet ups take place on the second Wednesday of the month at 9:00 or 15:00UTC! Register to receive a calendar invite: https://bit.ly/3s6ntmV or join directly via this link: https://meet.jit.si/TaskingManagerCollectiveMeetUp</li> <li>Read the monthly update blogs on OSM Discourse.</li> </ul>"},{"location":"#product-roadmap","title":"Product Roadmap","text":"<p>We have included below a high level roadmap/plan [subject to change] that can be used as an overview.</p>"},{"location":"#developers","title":"Developers","text":"<ul> <li>Understand the code</li> <li>Setup the TM for development</li> <li>Learn about versions and releases</li> <li>Help us and submit pull requests</li> </ul>"},{"location":"#instances","title":"Instances","text":"<ul> <li>HOT Tasking Manager (production)</li> <li>HOT Tasking Manager (staging)</li> <li>TeachOSM</li> <li>OpenStreetMap Indonesia</li> <li>OpenStreetMap US</li> <li>Map My Kerala</li> <li>OpenHistoricalMap</li> <li>Oceania Tasking Manager</li> </ul>"},{"location":"LICENSE/","title":"License","text":"<p>BSD 2-Clause License</p> <p>Copyright (c) 2017, Humanitarian OpenStreetMap Team All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice,   this list of conditions and the following disclaimer in the documentation   and/or other materials provided with the distribution.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"about/","title":"Tasking Manager","text":"<p>The most popular tool for teams to coordinate mapping on OpenStreetMap. With this web application, an area of interest can be defined and divided up into smaller tasks that can be completed rapidly. It shows which areas need to be mapped and which areas need a review for quality assurance. You can see the tool in action: log into the widely used HOT Tasking Manager and start mapping.</p> <p>This is Free and Open Source Software. You are welcome to use the code and set up your own instance. The Tasking Manager has been initially designed and built by and for the Humanitarian OpenStreetMap Team, and is nowadays used by many communities and organizations.</p>"},{"location":"about/#get-involved","title":"Get involved!","text":"<ul> <li>Start by reading our Code of conduct</li> <li>Get familiar with our contributor guidelines explaining the different ways in which you can support this project! We need your help!</li> <li>Join the Tasking Manager Collective Meet up - an opportunity to meet other Tasking Manager contributors. The meet ups take place on the second Wednesday of the month at 9:00 or 15:00UTC! Register to receive a calendar invite: https://bit.ly/3s6ntmV or join directly via this link: https://meet.jit.si/TaskingManagerCollectiveMeetUp</li> <li>Read the monthly update blogs on OSM Discourse.</li> </ul>"},{"location":"about/#product-roadmap","title":"Product Roadmap","text":"<p>We have included below a high level roadmap/plan [subject to change] that can be used as an overview.</p>"},{"location":"about/#developers","title":"Developers","text":"<ul> <li>Understand the code</li> <li>Setup the TM for development</li> <li>Learn about versions and releases</li> <li>Help us and submit pull requests</li> </ul>"},{"location":"about/#instances","title":"Instances","text":"<ul> <li>HOT Tasking Manager (production)</li> <li>HOT Tasking Manager (staging)</li> <li>TeachOSM</li> <li>OpenStreetMap Indonesia</li> <li>OpenStreetMap US</li> <li>Map My Kerala</li> <li>OpenHistoricalMap</li> <li>Oceania Tasking Manager</li> </ul>"},{"location":"code_of_conduct/","title":"Code of conduct","text":"<p>(The latest version can be found at https://www.hotosm.org/code-of-conduct)</p> <p>Welcome to Humanitarian OpenStreetMap Team. HOT is committed to providing a welcoming and safe environment for people of all races, gender identities, gender expressions, sexual orientations, physical abilities, physical appearances, socio-economic backgrounds, nationalities, ages, religions, and beliefs.</p> <p>The HOT community principles are:</p> <p>Be friendly and patient. Be generous and kind in both giving and accepting critique. Critique is a natural and important part of our culture. Good critiques are kind, respectful, clear, and constructive, focused on goals and requirements rather than personal preferences. You are expected to give and receive criticism with grace. Be considerate in speech and actions, and actively seek to acknowledge and respect the boundaries of fellow attendees.</p> <p>Be welcoming. We strive to be a community that welcomes and supports people of all backgrounds and identities. Some examples of behavior that contributes to creating a positive environment include:</p> <ul> <li> <p>Using welcoming and inclusive language.</p> </li> <li> <p>Being respectful of differing viewpoints and experiences.</p> </li> <li> <p>Gracefully accepting constructive criticism.</p> </li> <li> <p>Showing empathy towards other community members.</p> </li> <li> <p>Placing collective interest before your own interest.</p> </li> </ul> <p>Be considerate. Your work will be used by other people, and you in turn will depend on the work of others. Any decision you take will affect users and colleagues, and you should take those consequences into account when making decisions. Remember that we're a world-wide community, so you might not be communicating in someone else's primary language.</p> <p>Be respectful. Not all of us will agree all the time, but disagreement is no excuse for poor behavior and poor manners. We might all experience some frustration now and then, but we cannot allow that frustration to turn into a personal attack. It\u2019s important to remember that a community where people feel uncomfortable or threatened is not a productive one. Members of the HOT community should be respectful when dealing with other members as well as with people outside the HOT community.</p> <p>Be careful in your word choice. We are a global community of professionals, and we conduct ourselves professionally. Be kind to others. Do not insult or put down other participants. Harassment and other exclusionary behavior aren't acceptable. This includes, but is not limited to:</p> <ul> <li> <p>Violent threats or language directed against another person.</p> </li> <li> <p>Discriminatory jokes and language.</p> </li> <li> <p>Posting sexually explicit or violent material.</p> </li> <li> <p>Posting (or threatening to post) other people's personally identifying information (\"doxing\").</p> </li> <li> <p>Personal insults, especially those using racist or sexist terms.</p> </li> <li> <p>Unwelcome sexual attention.</p> </li> <li> <p>Advocating for, or encouraging, any of the above behavior.</p> </li> <li> <p>Repeated harassment of others. In general, if someone asks you to stop, then stop.</p> </li> </ul> <p>Assume all communications are positive. Always remain polite, and assume good faith. It is surprisingly easy to misunderstand each other, be it online or in person, particularly in such a culturally diverse setting as ours. Misunderstandings are particularly easy to arise when we are in a rush, or otherwise distracted. Please ask clarifying questions before assuming that the communication was inappropriate.</p> <p>When we disagree, try to understand why. Disagreements, both social and technical, happen easily and often. It is important that we resolve such disagreements and differing views constructively. At times it can be hard to appreciate a viewpoint that contradicts your own perceptions. Instead of pushing back, try to understand where the other person is coming from, and don\u2019t be afraid to ask questions. You can be most helpful if your own replies serve to clarify, rather than to escalate an issue. Also don\u2019t forget that it can be easy to make mistakes, and allow for the possibility that the mistake may have been yours. When this happens it is better to resolve the issue together, and to learn from the experience together, than to place blame.</p> <p>Original text courtesy of the Speak Up! project.</p> <p>Further sources:</p> <ul> <li> <p>Ada Initiative: HOWTO design a code of conduct for your community</p> </li> <li> <p>Algorithm Club Code of Conduct</p> </li> <li> <p>American Red Cross GIS Team Code of Conduct</p> </li> <li> <p>Contributor Covenant \u2013 A Code of Conduct for Open Source Projects</p> </li> <li> <p>Django Code of Conduct</p> </li> <li> <p>Mozilla Community Participation Guidelines</p> </li> <li> <p>Vox Media Code of Conduct</p> </li> </ul>"},{"location":"code_of_conduct/#complaint-handling-process","title":"Complaint Handling Process","text":"<p>As a first measure, it is preferable to work out issues directly with the people involved, or to work with other Community Members who can help you resolve the issue. This may take several forms:</p> <ul> <li> <p>Talk with one another. Assume that communications are positive and that people are treating each other with respect. Cues about emotions are often lacking in digital communications. Many of our modes of digital communication tend towards brevity, which can be easier to interpret incorrectly as being negative.</p> </li> <li> <p>Contact a representative of the Community Working Group, which exists to support the HOT Community. Representatives are available to discuss any concerns about behaviour within the community, or ideas to promote positive behaviours. You can email them at community@hotosm.org.</p> </li> <li> <p>Contact a representative of the Governance Working Group, which drafted these recommendations and the CoC. Representatives are available to provide advice on particular scenarios, as well as on the processes around the CoC.</p> </li> <li> <p>Contact the HOT Chair of Voting Members.</p> </li> <li> <p>Contact a HOT Board Member. Board members are well versed in the community and its management. They can offer advice on your particular situation, and know the resources of the organization that may be available to you.</p> </li> <li> <p>Contact the HOT Community Partnerships Manager.</p> </li> </ul> <p>When these informal processes fail, or when a situation warrants an immediate response by HOT, you can evoke the HOT Policy and Code of Conduct Complaint Handling Process. This process was adopted by HOT Voting Members in 2016 to provide a more formal means of enforcement for our community standards. You start it by emailing complaints@hotosm.org with a description of your complaint, your name, and the name of the offending party. All complaints will be considered confidential. The full process is described here</p>"},{"location":"contributing/","title":"Contributing to the Tasking Manager","text":""},{"location":"contributing/#welcome","title":"Welcome","text":"<p> First off, I'm really glad you're reading this, because we need volunteer developers to help improve the Tasking Manager.!  We welcome and encourage contributors of all skill levels and we are committed to making sure your participation in our tech collective is inclusive, enjoyable and rewarding. If you have never contributed to an open-source project before, we are a good place to start and will make sure you are supported every step of the way. If you have any questions, please ask!</p> <p>We are collaborating with Kathmandu Living Labs on the maintenance of the Tasking Manager - expect to hear a lot from all of us on Github :)</p> <p>There are many ways to contribute to the Tasking Manager Project:</p>"},{"location":"contributing/#report-bugs-and-suggest-improvements","title":"Report bugs and suggest improvements:","text":"<p>The issue queue is the best way to get started. There are issue templates for BUGs and FEATURES that you can use, or you can create your own. Once you have submitted an issue, it will be assigned one label out of the following label categories:</p> <ul> <li>Backlog:  Backlog=triage will first be assigned to any new issues</li> <li>Component</li> </ul> <p>On a monthly basis, we will collaboratively triage issues from the backlog=triage and assign one of the below labels: - Assigned: once reviewed the issue will be assigned either to hot_tech OR tm_collective. Issues assigned to tm_collective are where we really need your help! - Type: specifying whether the issue is a bug or feature/enhancement - Priority: specifying the priority level for each issue. We want to collaboratively agree on the criteria for prioritisation. - Status: specifying whether the issue is in progress or done. - Experience: we have added a beginner label for good first issues. We will work with the community to update the labels in this category and make them suitable.</p> <p>Note: Issues older than 6 months from the point of raising the issue with no engagement will be labelled as archived.</p>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Test a bug fix or new feature. Once an issue has been addressed and Pull Request (PR) change deployed to the Tasking Manager Staging site, you will be able to view and test the change on the staging site. A PR would then be made from develop to the master branch, which would require two reviews. If you notice any issues while testing, please comment on the PR directly.</p>"},{"location":"contributing/#code-contributions","title":"Code contributions","text":"<p>Create pull requests (PRs) for changes that you think are needed. We would really appreciate your help! We ask that you follow our coding contribution guidelines.</p>"},{"location":"contributing/#translating","title":"Translating","text":"<p>Review or submit language translations</p>"},{"location":"contributing/#thank-you","title":"Thank you!","text":"<p>Thank you very much in advance for your contributions!! Please ensure you refer to our Code of Conduct when you contribute!</p> <p>If you've read the guidelines, but you are still not sure how to contribute on Github, please reach out to us via our [ HOT Tech Support page](https://hotosm.atlassian.net/servicedesk/customer/portal/4 and we will be happy to help!</p>"},{"location":"developers/contributing-guidelines/","title":"Code contributions","text":"<p>Project and code leads are experienced HOT volunteer and staff developers and the main points of contact for the project. They are also the final reviewers of issues and pull requests. Code leads will review pull requests and provide feedback. The purpose of this role is to help contributors, provide consistency and ensure code quality.</p> <p>Currently, HOT has been collaborating with the developers at Kathmandu Living Labs to help maintain and support community development on the project. Their role as leaders on the project and in the development community has greatly benefitted the Tasking Manager development and sustainability of the project.</p> <p>All of the development is going to happen in the project repository and everything we work on shall be related to and documented in issues of the related issue queue.</p>"},{"location":"developers/contributing-guidelines/#code-basics","title":"Code basics","text":"<ol> <li>Write tests for all new backend features and use a tool (like coveralls.io) to measure test coverage.</li> <li>Consider writing tests when building new frontend.</li> <li>Stick to pep8 python style guide for the backend.</li> <li>Apply ESLint and prettier style guide rules for the frontend code.</li> <li>Export translatable strings with <code>make refresh-translatables</code> and include them in your commit.</li> <li>When creating new environment variables or changing existing ones, make sure to add them to the AWS Cloudformation template (see the deployment docs) and note them in the Pull Request.</li> </ol>"},{"location":"developers/contributing-guidelines/#code-collaboration-and-version-control","title":"Code collaboration and version control","text":"<p>Note: We use git flow as our branching model. Read more here and here, and refer to this cheatsheet if you aren\u2019t familiar with it yet. You probably want to install a helper application to facilitate the flow a bit.</p> <ul> <li>Use branches in the tasking-manager project. This allows others to rebase your branch when they are reviewing or to continue started work. We follow git flow\u2019s naming convention</li> <li><code>feature/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for general new features you are working on</li> <li><code>hotfix/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for important bug fixes that need to go into the main releases as soon as possible</li> <li><code>bugfix/ISSUENUMBER-SHORT-TITLE-SEPARATED-BY-HYPHENS</code> for non-critical fixes that can be deployed in the next scheduled release. (e.g. for a normal feature feature/893-restrict-available-editors).</li> <li>Make sure your PR is always up to date and rebased with the latest develop branch.</li> <li>Try to build a nice and understandable commit history of the project. Please use meaningful commit messages and try to unite/squash related work into one commit. Eventually we will squash commits before merging a new feature or hotfix into the main branches (develop and master).</li> <li>Give meaningful and understandable testing instructions in your PR. Highlight important preconditions and try to make life easier for the reviewer.</li> </ul>"},{"location":"developers/contributing-guidelines/#comments","title":"Comments","text":"<p>Sometimes it's not apparent from the code itself what it does, or more importantly, why it does that. Good comments help your fellow developers understand the code better and make sure that it is doing the right thing.</p> <p>When developing, you should:</p> <ul> <li>Comment your code - do not go overboard, but explain the bits which might be difficult to understand. As a general rule of thumb, try to explain what the code does, why it does it, and why it should be the way it is or where it could be improved in the future.</li> <li>Check existing comments to ensure they are not misleading.</li> </ul>"},{"location":"developers/contributing-guidelines/#committing","title":"Committing","text":"<p>When you submit pull requests, the project maintainer has to read them and understand them. This is difficult enough at the best of times, and misunderstanding pull requests can lead to them being more difficult to merge. To help with this, when making pull requests you should:</p> <ul> <li>Split up large changes into smaller units of functionality.</li> <li>Keep your commit messages relevant to the changes in each individual unit.</li> </ul> <p>When writing commit messages please try and stick to the same style as other commits, namely:</p> <ul> <li>A one line summary, starting with a capital letter.</li> <li>A blank line.</li> <li>Full description, as proper sentences.</li> </ul> <p>For simple commits the one line summary is often enough and the body of the commit message can be left out.</p> <p>Before sending a PR, make sure you run the following commands and include the changes in your commit.</p> <ul> <li>Code formatting:</li> <li>Format all backend code by running Black: <code>black manage.py backend tests migrations</code> or <code>pdm run lint</code></li> <li>Format all frontend code with prettier either by configuring your editor or by running <code>yarn prettier</code> inside the <code>frontend</code> directory.</li> <li>Coding standards: Make sure you adhere to the coding standards eventually risen by Flake8: <code>flake8 manage.py backend tests migrations</code> or <code>pdm run flake8</code></li> <li>Prepare for translations: In case you have introduced new strings on the frontend, the translation source file must be updated this can be done via <code>make refresh-translatables</code> or <code>yarn build-locales</code> (inside the <code>frontend</code> directory).</li> </ul> <p>If you have forked this project on GitHub then the best way to submit your patches is to push your changes back to your GitHub repository and then send a \"pull request\" via GitHub to the main repository.</p> <p>You can use this git pre-commit hook to format both the frontend and the backend code:</p> <pre><code>#!/bin/sh\nJS_FILES=$(git diff --cached --name-only --diff-filter=ACMR \"*.js\" \"*.jsx\" | sed 's| |\\\\ |g')\nPY_FILES=$(git diff --cached --name-only --diff-filter=ACMR \"*.py\" | sed 's| |\\\\ |g')\n([ -z \"$JS_FILES\" ] &amp;&amp; [ -z \"$PY_FILES\" ]) &amp;&amp; exit 0\n\n# Prettify all selected files\necho \"$JS_FILES\" | xargs ./frontend/node_modules/.bin/prettier --write\necho \"$PY_FILES\" | xargs black\n\n# Add back the modified/prettified files to staging\necho \"$JS_FILES\" | xargs git add\necho \"$PY_FILES\" | xargs git add\n\nexit 0\n</code></pre>"},{"location":"developers/contributing-guidelines/#reviewing-pull-requests","title":"Reviewing Pull Requests","text":"<p>We welcome community members to review Pull Request. The process to review a PR  is by adding a comment if already reviewed and everything looks good, or specifying what change is needed.</p>"},{"location":"developers/contributing-guidelines/#translators","title":"Translators","text":"<p>The Tasking Manager is localised using our Transifex repository. This is super easy. If you are interested, make yourself an account and apply to join the <code>hotosm-translator</code> team. Everybody is welcome to support translations through the Transifex website.</p>"},{"location":"developers/contributing-guidelines/#developers","title":"Developers","text":"<p>For developers, Transifex offers a CLI client and the Tasking Manager offers commands to interact with it. The client is already included in <code>requirements.txt</code> so you should have the Transifex commands installed once you have set up your backend side code.</p> <p>The Tasking Manager is using Angular Translate to display the translated strings. It works with key/value pairs in .json format, which is also the format used to store the translations in Transifex.</p>"},{"location":"developers/contributing-guidelines/#setting-up-transifex-locally","title":"Setting up Transifex locally","text":"<p>To set up the Transifex client, you'll need a Transifex account and API key. In the project's top level directory, initialize Transifex service: <code>tx init</code>. The init process will ask for service URL (leave the default suggestion by hitting enter) and your Transifex username/password.</p> <p>The .tx folder contains the Transifex config file. This is where you can find the mappings to local translation files.</p>"},{"location":"developers/contributing-guidelines/#update-translation-strings","title":"Update translation strings","text":"<ul> <li><code>yarn build-locales</code> -  Execute that command in the <code>frontend</code> folder to get the new translatable strings from all the <code>messages.js</code> files in the frontend code. The changes in the strings will be pushed to <code>frontend/src/locales/en.json</code> file. The ideal is to execute that command before every pull request that change something in the translatable strings.</li> <li>After the pull request is merged to the <code>develop</code> branch, the command <code>tx push -s</code> needs to be executed in order to push the changes to Transifex. The translators receive a notification every time we push changes to Transifex.</li> </ul>"},{"location":"developers/contributing-guidelines/#update-with-latest-translations","title":"Update with latest translations","text":"<ul> <li>Before a release, new translations need to be pulled in: <code>tx pull -af --mode translator</code> -  Gets all translations from Transifex and puts them into <code>frontend/src/locales/</code>.</li> <li>The Transifex dashboard can be used to check the status of the translations. If a language is not enabled in the <code>.tx/config</code> file, the translation updates will be downloaded to the <code>.tx/tasking-manager.version-4/</code> folder.</li> </ul>"},{"location":"developers/contributing-guidelines/#adding-a-new-language","title":"Adding a new language","text":"<p>The steps required to add a new language support to Tasking Manager are the following:</p> <ul> <li>Add the language support using the Transifex dashboard;</li> <li>Edit <code>.tx/config</code> and add a line like: <code>trans.ml = frontend/src/locales/ml.json</code></li> <li>Add the new language and language code to:</li> <li>The <code>SUPPORTED_LANGUAGES</code> dictionary in the config file <code>backend/config.py</code>;</li> <li>The <code>supportedLocales</code> array on <code>frontend/src/utils/internationalization.js</code>;</li> <li>The polyfills in <code>frontend/src/utils/polyfill.js</code>;</li> <li>If the new language is not yet supported by iso-countries-languages, we need to update it and publish a new version.</li> </ul>"},{"location":"developers/contributing-guidelines/#pushing-translations","title":"Pushing translations","text":"<p>You can also translate locally and push the Use Transifex's <code>tx push -s</code> to push local changes to Transifex.</p> <ul> <li>Argument <code>-s</code> pushes source files (English in our case)</li> <li>Argument <code>-t</code> pushes all translation files</li> </ul>"},{"location":"developers/development-setup/","title":"Development Setup","text":""},{"location":"developers/development-setup/#development-setup","title":"Development setup","text":""},{"location":"developers/development-setup/#architecture","title":"Architecture","text":"<p>The Tasking Manager is composed of two parts:</p> <ul> <li>Frontend: A user interface built using React.</li> <li>Backend: A database and API built using Python.</li> </ul> <p>The two parts can be developed independently of each other.</p>"},{"location":"developers/development-setup/#frontend","title":"Frontend","text":"<p>The client is the front-end user interface of the Tasking Manager. It is based on the React framework and you can find all files in the <code>frontend</code> directory.</p> <p>If you don't want to setup a backend server, you can work on frontend development using our staging server API. Execute <code>export TM_APP_API_URL='https://tasking-manager-staging-api.hotosm.org'</code> before running the <code>yarn start</code> command. Be aware that the staging API can be offline while we are deploying newer versions to the staging server and that you'll not have access to some management views due to permissions. Check the configuration section to learn more about how to configure Tasking Manager.</p> <p>Dependencies</p> <p>The following dependencies must be available globally on your system: * Download and install NodeJS LTS v12+ and yarn * Go into the <code>frontend</code> directory and execute <code>yarn</code>.</p>"},{"location":"developers/development-setup/#available-scripts","title":"Available Scripts","text":"<p>In the project directory, you can run:</p>"},{"location":"developers/development-setup/#yarn-start","title":"<code>yarn start</code>","text":"<p>Runs the app in the development mode. Open http://localhost:3000 to view it in the browser.</p> <p>The page will reload if you make edits. You will also see any lint errors in the console.</p>"},{"location":"developers/development-setup/#yarn-test","title":"<code>yarn test</code>","text":"<p>Launches the test runner in the interactive watch mode. See the section about running tests for more information.</p>"},{"location":"developers/development-setup/#yarn-build","title":"<code>yarn build</code>","text":"<p>Builds the app for production to the <code>build</code> folder. It correctly bundles React in production mode and optimizes the build for the best performance.</p> <p>The build is minified and the filenames include the hashes. Your app is ready to be deployed!</p> <p>See the section about deployment for more information.</p>"},{"location":"developers/development-setup/#learn-more","title":"Learn More","text":"<p>You can learn more in the Create React App documentation.</p> <p>To learn React, check out the React documentation.</p>"},{"location":"developers/development-setup/#backend","title":"Backend","text":"<p>The backend is made up of a postgres database and an associated API that calls various end points to create tasks, manage task state, and produce analytics.</p>"},{"location":"developers/development-setup/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li>Python 3.7 is what HOT uses in production. You can use Python 3.8 too.</li> <li>PostgreSQL with PostGIS</li> <li>pip</li> <li>libgeos-dev</li> </ul> <p>You can check the Dockerfile to have a reference of how to install it in a Debian/Ubuntu system.</p>"},{"location":"developers/development-setup/#configuration","title":"Configuration","text":"<p>There are two ways to configure Tasking Manager. You can set some environment variables on your shell or you can define the configuration in the <code>tasking-manager.env</code> file on the repository root directory. To use that last option, follow the below instructions:</p> <ul> <li>Copy the example configuration file to start your own configuration: <code>cp example.env tasking-manager.env</code>.</li> <li>Adjust the <code>tasking-manager.env</code> configuration file to fit your configuration.</li> <li>Make sure that the following variables are set correctly in the <code>tasking-manager.env</code> configuration file:</li> <li><code>TM_APP_BASE_URL</code>=web-server-endpoint</li> <li><code>POSTGRES_DB</code>=tasking-manager-database-name</li> <li><code>POSTGRES_USER</code>=database-user-name</li> <li><code>POSTGRES_PASSWORD</code>=database-user-password</li> <li><code>POSTGRES_ENDPOINT</code>=database-endpoint-can-be-localhost</li> <li><code>POSTGRES_PORT</code>=database-port</li> <li><code>TM_SECRET</code>=define-freely-any-number-and-letter-combination</li> <li><code>TM_CLIENT_ID</code>=oauth-client-id-from-openstreetmap</li> <li><code>TM_CLIENT_SECRET</code>=oauth-client-secret-key-from-openstreetmap</li> <li><code>TM_REDIRECT_URI</code>=oauth-client-redirect_uri</li> <li><code>TM_SCOPE</code>=oauth-client-scopes</li> </ul> <p>In order to send email correctly, set these variables as well:   - <code>TM_SMTP_HOST</code>   - <code>TM_SMTP_PORT</code>   - <code>TM_SMTP_USER</code>   - <code>TM_SMTP_PASSWORD</code>   - <code>TM_SMTP_USE_TLS=0</code>   - <code>TM_SMTP_USE_SSL=1</code> (Either TLS or SSL can be set to 1 but not both)</p>"},{"location":"developers/development-setup/#build","title":"Build","text":"<ul> <li>Install project dependencies:<ul> <li>Linux/Mac (Option 1: pep582):<ul> <li>First ensure the Python version in <code>pyproject.toml:requires-python</code> is installed on your system.</li> <li><code>pip install --upgrade pdm</code></li> <li><code>pdm config --global python.use_venv False</code></li> <li><code>pdm --pep582 &gt;&gt; ~/.bash_profile</code></li> <li><code>source ~/.bash_profile</code></li> <li><code>pdm install</code></li> </ul> </li> <li>Linux/Mac (Option 2: pip (system/venv)):<ul> <li><code>pip install --upgrade pdm</code></li> <li><code>pdm export --without-hashes &gt; requirements.txt</code></li> <li><code>pip install requirements.txt</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"developers/development-setup/#tests","title":"Tests","text":"<p>The project includes a suite of Unit and Integration tests that you should run after any changes</p> <p><pre><code>python3 -m unittest discover tests/backend\n</code></pre> or  <pre><code>pdm run test\n</code></pre></p>"},{"location":"developers/development-setup/#export-translatable-strings-to-enjson-source-file","title":"Export translatable strings to en.json source file","text":"<pre><code>cd frontend &amp;&amp; yarn build-locales\n</code></pre>"},{"location":"developers/development-setup/#database","title":"Database","text":""},{"location":"developers/development-setup/#create-a-fresh-database","title":"Create a fresh database","text":"<p>We use Flask-Migrate to create the database from the migrations directory. Check the instructions on how to setup a PostGIS database with docker or on your local system. Then you can execute the following command to apply the migrations:</p> <p><pre><code>flask db upgrade\n</code></pre> or  <pre><code>pdm run upgrade\n</code></pre></p>"},{"location":"developers/development-setup/#set-permissions-to-create-projects","title":"Set permissions to create projects","text":"<p>To be able to create projects and have full permissions as an admin user inside TM, login to the TM with your OSM account to populate your user information in the database, then execute the following command on your terminal (with the OS user that is the owner of the database):</p> <p><code>psql -d &lt;your_database&gt; -c \"UPDATE users set role = 1 where username = '&lt;your_osm_username&gt;'\"</code></p>"},{"location":"developers/development-setup/#api","title":"API","text":"<p>If you plan to only work on the API you only have to build the backend architecture. Install the backend dependencies, and run the server:</p> <p><code>flask run --debug --reload</code> or  <code>pdm run start</code></p> <p>You can access the API documentation on http://localhost:5000/api-docs, it also allows you to execute requests on your local TM instance. The API docs is also available on our production and staging instances.</p>"},{"location":"developers/development-setup/#api-authentication","title":"API Authentication","text":"<p>In order to authenticate on the API, you need to have an Authorization Token.</p> <ol> <li>Run the command line <code>manage.py</code> via <code>flask</code> with the <code>gen_token</code> option and <code>-u &lt;OSM_User_ID_number&gt;</code>. The command line can be run in any shell session as long as you are in the tasking-manager directory.</li> </ol> <pre><code>flask gen_token -u 99999999\n</code></pre> <p>This will generate a line that looks like this:</p> <p>Your base64 encoded session token: b'SWpFaS5EaEoxRlEubHRVC1DSTVJZ2hfalMc0xlalu3KRk5BUGk0'</p> <ol> <li>In the Swagger UI, where it says <p>Token sessionTokenHere==</p> </li> </ol> <p>replace <code>sessionTokenHere==</code> with the string of characters between the apostrophes (' ') above so you end up with something that looks like this in that field:</p> <p>Token SWpFaS5EaEoxRlEubHRVC1DSTVJZ2hfalMc0xlalu3KRk5BUGk0</p> <p>Your user must have logged in to the local testing instance once of course and have the needed permissions for the API call.</p> <p>You can get your OSM user id number either by finding it in your local testing/dev database <code>select * from users</code> or from OSM by viewing the edit history of your user, selecting a changeset from the list, and then at the bottom link <code>Changeset XML</code> and it will be in the <code>uid</code> field of the XML returned.</p>"},{"location":"developers/development-setup/#api-authentication-on-remote-instance","title":"API Authentication on remote instance","text":"<p>To get your token on the production or staging Tasking Manager instances, sign in in the browser and then either:</p> <ul> <li>go to the user profile page, enable Expert mode in the settings, and copy the token from the API Key section.</li> <li>inspect a network request and search for the <code>Authorization</code> field in the request headers section.</li> </ul>"},{"location":"developers/development-setup/#docker","title":"Docker","text":""},{"location":"developers/development-setup/#creating-a-local-postgis-database-with-docker","title":"Creating a local PostGIS database with Docker","text":"<p>If you're not able to connect to an existing tasking-manager DB, we have a Dockerfile that will allow you to run PostGIS locally as follows.</p>"},{"location":"developers/development-setup/#dependencies_1","title":"Dependencies","text":"<p>Following must be available locally:</p> <ul> <li>Docker CE</li> </ul>"},{"location":"developers/development-setup/#build-run-the-postgis-dockerfile","title":"Build &amp; Run the PostGIS dockerfile","text":"<ol> <li>From the root of the project:</li> </ol> <p><code>docker build -t tasking-manager-db ./scripts/docker/postgis</code></p> <ol> <li>The image should be downloaded and build locally.  Once complete you should see it listed, with</li> </ol> <p><code>docker images</code></p> <ol> <li>You can now run the image (this will run PostGIS in a docker container, with port 5432 mapped to localhost):</li> </ol> <p><code>docker run -d -p 5432:5432 tasking-manager-db</code></p> <ol> <li>Confirm the image is running successfully:</li> </ol> <p><code>docker ps</code></p> <ol> <li>Finally you can set your env variable to point at your containerised DB:</li> </ol> <p><code>export TM_DB=postgresql://hottm:hottm@localhost/tasking-manager</code></p> <ol> <li>Refer to the rest of the instructions in the README to setup the DB and run the app</li> </ol>"},{"location":"developers/development-setup/#non-docker","title":"Non-Docker","text":""},{"location":"developers/development-setup/#creating-the-postgis-database","title":"Creating the PostGIS database","text":"<p>It may be the case you would like to set up the database without using Docker for one reason or another. This provides you with a set of commands to create the database and export the database address to allow you to dive into backend development.</p>"},{"location":"developers/development-setup/#dependencies_2","title":"Dependencies","text":"<p>First, ensure that Postgresql and PostGIS are installed and running on your computer.</p>"},{"location":"developers/development-setup/#create-the-database-user-and-database","title":"Create the database user and database","text":"<p>Assuming you have sudo access and the unix Postgresql owner is <code>postgres</code>:</p> <pre><code>$ sudo -u postgres psql\n$ CREATE USER \"hottm\" PASSWORD 'hottm';\n$ CREATE DATABASE \"tasking-manager\" OWNER \"hottm\";\n$ \\c \"tasking-manager\";\n$ CREATE EXTENSION postgis;\n</code></pre> <p>Finally, add the environmental variable to access the database:</p> <p><code>export TM_DB=postgresql://hottm:hottm@localhost/tasking-manager</code></p> <p>It is possible to install and run the Tasking Manager using Docker and Docker Compose.</p> <p>Clone the Tasking Manager repository and use <code>docker-compose up</code> to get a working version of the API running.</p>"},{"location":"developers/development-setup/#sysadmins-guide","title":"Sysadmins guide","text":"<ul> <li>System architecture</li> <li>Managing CI/CD with CircleCI</li> <li>Deployment Guide</li> </ul>"},{"location":"developers/understanding-the-code/","title":"Understanding the Code","text":"<p>TBD</p>"},{"location":"developers/versions-and-releases/","title":"Versions and Releases","text":"<p>We recently switched to a trunk-based development model for managing development.</p> <ul> <li><code>master</code> branch has recently been depreciated in favor of using <code>develop</code> as the trunk branch.</li> <li><code>develop</code> branch contains the consistent and mostly stable development version of the Tasking Manager. It is the branch where all reviewed features are combined and tested together. This branch is automatically going to be deployed on tasks-stage.hotosm.org.</li> <li><code>feature/</code> branches are applied to <code>develop</code> after one teammate has reviewed the pull request as approved.</li> <li><code>hotfix/</code> branches are applied to <code>develop</code> after two teammates have reviewed the pull request as approved.</li> <li><code>bugfix/</code> branches are applied to <code>develop</code> after two teammates have reviewed the pull request as approved. This convention applies to non-critical fixes that can be deployed in the next scheduled release.</li> <li><code>deployment/</code> branches contain the codebase for deployed code. See Deployment for more info.</li> </ul> <p>Outside collaborations from the wider community most likely will not always apply the trunk branching model and the conventions for naming the branches. This doesn\u2019t have to be a requirement in this case.</p>"},{"location":"developers/versions-and-releases/#major-releases","title":"Major releases","text":"<p>This procedure is undergoing changes! Keep an eye on this space for updated info soon.</p> <p>We consider major releases to be counting the second digit up (e.g. 3.1.0 or 3.2.0). Major releases shall happen around once every six weeks and follow an established procedure:</p> <ul> <li>After four weeks coordinate a feature freeze. Which can happen immediately, or might give some one or two weeks for finishing up the features that the team wants to have in the next release.</li> <li>Freeze <code>develop</code> after agreed improvements have been implemented. The feature freeze shall last for one week, which means no feature branch pull requests can be merged for the time being.</li> <li>Create a Pull Request to <code>master</code> from the <code>develop</code> branch. Include the release notes into it, so it can be reviewed by the team.</li> <li>Ping <code>@hotosm/software-testers</code> group to test tasks-stage.hotosm.org extensively.</li> <li>Get approval of two code reviews of core contributors to the Tasking Manager.</li> <li>After one week and good feedback merge into <code>master</code>.</li> <li>Rebase <code>develop</code> on <code>master</code>.</li> <li>Create a tag with a release from the <code>master</code> branch.</li> </ul>"},{"location":"developers/versions-and-releases/#minor-releases","title":"Minor releases","text":"<p>A minor release refers to the third digit (like 3.2.1 or 3.2.2). It is meant to be an emergency release to fix bugs that are crucial. Only hotfix branches can be applied.</p> <ul> <li>Create a Pull Request to <code>master</code> from a <code>hotfix</code> branch. Include brief release notes into it, so it can be reviewed by the team.</li> <li>Get approval of two code reviews of core contributors to the Tasking Manager.</li> <li>Merge into <code>master</code> and <code>develop</code>.</li> <li>Rebase <code>develop</code> on <code>master</code>.</li> <li>Create a tag with a release from the <code>master</code> branch.</li> </ul>"},{"location":"sysadmins/architecture/","title":"Architecture","text":"<p>Reference for the Cloudformation script:</p> <p>TaskingManagerASG AutoScalingGroup configures the properties of the Autoscaling Group. There is a condition that determines three levels of autoscaling: development (1 instance only), demo (max 3 instances), and production (min 2 max 6 instances).</p> <p>TaskingManagerScaleUp Scaling Policy determines the threshold at which the ASG scales up. We use the CloudWatch metric ALBRequestCountPerTarget to keep the number of requests per instance below a certain level.</p> <p>TaskingManagerLaunchConfiguration has a number of metadata files and commands which are loaded and run during instantiation of a new server into the ASG. The Tasking Manager environment variables are set in this resource.</p> <p>TaskingManagerEC2Role IAM role enables the backend servers to communicate with CodeDeploy, CloudWatch monitoring, Cloudformation, and the RDS Database.</p> <p>TaskingManagerDatabaseDumpAccessRole is an EC2 IAM Role that is only used if a database dump file is given in the configuration, enabling access to the s3 bucket containing that file.</p> <p>TaskingManagerEC2InstanceProfile is a required resource for giving a server programmatic access to AWS services.</p> <p>TaskingManagerLoadBalancer configures the security groups and subnets for the Application Load Balancer AWS resource.</p> <p>TaskingManagerLoadBalancerRoute53 record set for the load balancer.</p> <p>TaskingManagerTargetGroup configures health checks for each target in the Load Balancer.</p> <p>TaskingManagerLoadBalancerHTTPSListener assigns the SSL Certificate, protocol, and port to the HTTPS Listener.</p> <p>TaskingManagerLoadBalancerHTTPListener redirects requests to HTTPS.</p> <p>TaskingManagerRDS configures all the properties of the database RDS.</p> <p>TaskingManagerReactBucket is the bucket where the frontend code is stored and served.</p> <p>TaskingManagerReactBucketPolicy gives read access to the objects stored in the bucket.</p> <p>TaskingManagerReactCloudfront configures the CloudFront Distribution for the static frontend stored on S3.</p> <p>TaskingManagerRoute53 is the Route53 Record for the frontend, i.e. <code>tasks.hotosm.org</code></p>"},{"location":"sysadmins/architecture/#parameters","title":"Parameters","text":"<p>GitSha is the commit hash from the HOTOSM Tasking Manager repository to be deployed</p> <p>NetworkEnvironment has only two options- <code>staging</code> and <code>production</code>, and determines the security groups used for the EC2s and Load Balancer.</p> <p>AutoscalingPolicy can be <code>development</code>, <code>demo</code>, or <code>production</code> and determines the min/max number of instances</p> <p>DBSnapshot is an optional parameter. Specify the RDS Snapshot ID to create the database from a snapshot</p> <p>DatabaseDump is an optional parameter. Specify the s3 bucket object path to create the database from a plaintext dump file.</p> <p>NewRelicLicense</p> <p>PostgresDB is the name of the database</p> <p>PostgresPassword is the database password</p> <p>PostgresUser is the database user</p> <p>DatabaseEngineVersion AWS PostgreSQL Engine version</p> <p>DatabaseInstanceType is the AWS database instance tier (eg db.t3.large)</p> <p>DatabaseDiskSize is the size (in GB) of the RDS instance. Recommended at least 100GB for better IOPS</p> <p>DatabaseParameterGroupName use the default parameter group if you don't know what this is</p> <p>DatabaseSnapshotRetentionPeriod Retention period for automatic (scheduled) snapshots in days</p> <p>ELBSubnets is a comma-separated string of subnets for your AWS region. Make sure the subnets support the EC2 instance type.</p> <p>SSLCertificateIdentifier the ID for the AWS SSL Certificate</p> <p>TaskingManagerLogDirectory the path on the instance where the logs are stored on the server, e.g. <code>/var/log/tasking-manager/</code></p> <p>TaskingManagerClientId is a key generated by creating and OSM OAuth Client Application.</p> <p>TaskingManagerClientSecret is a secret key generated by creating and OSM OAuth Client Application.</p> <p>TaskingManagerRedirectUri allowed URIs to which the user can be redirected after authorizing the application.</p> <p>TaskingManagerScope are scope(s) which may be requested by a client.</p> <p>TaskingManagerSecret a random string for the frontend and backend to communicate.</p> <p>TaskingManagerAppBaseUrl the full base url of the site, e.g. <code>https://tasks.hotosm.org/</code></p> <p>TaskingManagerEmailFromAddress an email address from which messages will be sent to users.</p> <p>TaskingManagerEmailContactAddress a contact address which will show up in places around the site</p> <p>TaskingManagerLogLevel can be either <code>DEBUG</code> or <code>INFO</code></p> <p>TaskingManagerImageUploadAPIURL</p> <p>TaskingManagerImageUploadAPIKey</p> <p>TaskingManagerSMTPHost the host url for the AWS Simple Email Service</p> <p>TaskingManagerSMTPPassword the authentication password for AWS SES</p> <p>TaskingManagerSMTPUser the authentication user for AWS SES</p> <p>TaskingManagerSMTPPort the port for AWS SES</p> <p>TaskingManagerDefaultChangesetComment the project default comment hashtag</p> <p>TaskingManagerURL the url without the protocol- e.g. <code>tasks.hotosm.org</code></p> <p>TaskingManagerOrgName Name of the app/org hosting the app</p> <p>TaskingManagerOrgCode 3 letter code for the org name</p> <p>SentryBackendDSN If using sentry, input DSN url here</p> <p>TaskingManagerLogo URL for a logo</p>"},{"location":"sysadmins/ci-cd/","title":"CI/CD","text":"<p>We use CircleCI to manage Continuous Integration and Continuous Deployment.</p> Environment Branch Production deployment/hot-tasking-manager Production-frontend deployment/hot-tasking-manager-frontend Staging develop TeachOSM deployment/teachosm-tasking-manager Indonesia deployment/id-tasking-manager <p>Each environment has its own set of environment variables which are stored as secrets in the CircleCI Organization Settings under Contexts.</p> <ul> <li>OPSGENIE_API</li> <li>TM_APP_API_URL</li> <li>TM_APP_API_VERSION</li> <li>TM_APP_BASE_URL</li> <li>TM_CONSUMER_KEY</li> <li>TM_CONSUMER_SECRET</li> <li>TM_ENABLE_SERVICEWORKER</li> <li>TM_MAPBOX_TOKEN</li> <li>TM_MATOMO_ENDPOINT</li> <li>TM_MATOMO_ID</li> <li>TM_ORG_CODE</li> <li>TM_ORG_NAME</li> <li>TM_ORG_PRIVACY_POLICY_URL</li> <li>TM_ORG_URL</li> <li>TM_SERVICE_DESK</li> </ul>"},{"location":"sysadmins/ci-cd/#automated-tests","title":"Automated Tests","text":"<p>For each Pull Request and branch, the CI runs a set of frontend and backend tests. We have a context in place called \"tasking-manager-testing\" for setting up the database with the following environment variables:</p> <ul> <li>POSTGRES_DB</li> <li>POSTGRES_ENDPOINT</li> <li>POSTGRES_USER</li> <li>TM_ORG_CODE</li> <li>TM_ORG_NAME</li> </ul> <p>Note that the POSTGRES_DB variable should be for the default database (in our case <code>tm</code>) the testing script will create a database called <code>test_$POSTGRES_DB</code> during setup. The <code>TM_ORG_*</code> vars are required for certain tests to pass; most notably )<code>test_variable_replacing</code> in the <code>TestTemplateService</code>.</p>"},{"location":"sysadmins/ci-cd/#refreshing-circleci-cache","title":"Refreshing CircleCI Cache","text":"<p>The CI stores the frontend node_modules folder to save time on builds. Sometimes it will be necessary to force all builds to use a fresh installation, so the cache will have to be refreshed manually.</p> <p>In the Tasking Manager CircleCI settings there is an environment variable \"CACHEVERSION\". Set this value to <code>v{n}</code> where {n} is an integer increased by 1 each time you wish to clear the cache.</p>"},{"location":"sysadmins/deployment/","title":"Deployment Process","text":""},{"location":"sysadmins/deployment/#deploying-to-aws","title":"Deploying to AWS","text":"<p>Backend</p> <p>Prerequisites:   - AWS Simple Email Service Domain and SMTP Credentials   - AWS VPC and Security groups:     - VPC: <code>hotosm-network-production-default-vpc-&lt;region&gt;</code>     - Security Groups:       - <code>hotosm-network-production-&lt;NetworkEnvironment&gt;-ec2s-security-group</code>       - <code>hotosm-network-production-&lt;NetworkEnvironment&gt;-elbs-security-group</code>   - cfn-config   - S3 bucket for storing cfn-config json files</p> <pre><code>cfn-config create &lt;stack-name&gt; scripts/aws/cloudformation/tasking-manager.template.js -t &lt;cfn-template-bucket&gt; -c &lt;cfn-config-bucket&gt;\n</code></pre> <p>Frontend</p> <p>This step is optional if you choose to setup CI/CD</p> <p>First the environment variables in <code>./frontend/.env</code>, then run the following code. <code>&lt;TaskingManagerReactBucket&gt;</code> is the name of the bucket in the cloudformation stack created above.</p> <pre><code>cd ./frontend/\nyarn\nyarn build\naws s3 sync build/ &lt;TaskingManagerReactBucket&gt; --delete\n</code></pre>"},{"location":"sysadmins/deployment/#performing-updates","title":"Performing Updates","text":"<p>When deploying updates to the infrastructure or code, follow the steps below.</p>"},{"location":"sysadmins/deployment/#backup-database","title":"Backup Database","text":"<p>Before updating it's always recommended to backup the database. You can make a snapshot in AWS RDS console, or run the database dump directly. Make sure you have set your security group to allow access to the database on your local machine.</p> <pre><code>PGPASSWORD=&lt;PostgresPassword&gt; pg_dump -Fc \\\n  -h &lt;RDS_URI&gt; \\\n  -U &lt;PostgresUser&gt; \\\n  -f backup.dump \\\n  &lt;PostgresDB&gt;\n</code></pre>"},{"location":"sysadmins/deployment/#update-backend-infrastructure","title":"Update backend infrastructure","text":"<p>If the deployment contains any changes to the cloudformation template, then we must update the infrastructure prior to deployment. These changes are deliberately outside the CI/CD process to prevent accidental deletion of data.</p> <ol> <li>Pull the latest changes locally</li> <li>Run the <code>cfn-config update</code> command, keeping in mind to update any new parameters that were added.</li> </ol> <pre><code>cfn-config update tm4-production \\\n scripts/aws/cloudformation/tasking-manager.template.js \\\n -t hot-cfn-config -c hot-cfn-config\n</code></pre>"},{"location":"sysadmins/deployment/#deploy-code-to-production","title":"Deploy Code to Production","text":"<p>Make sure you have set up CI/CD properly first. We use a simple git branch model to manage different deployments/environments, so adjust the branch names as needed.</p> <pre><code>git checkout develop\ngit fetch\ngit pull origin develop\ngit checkout deployment/hot-tasking-manager\ngit pull origin deployment/hot-tasking-manager\ngit rebase develop\ngit push origin deployment/hot-tasking-manager\n</code></pre> <p>In the event that the changes to be deployed are frontend only, you may instead rebase and push the <code>deployment/hot-tasking-manager-frontend</code> branch. This will be significantly faster and less disruptive than a standard deployment, which has to replace compute resources.</p>"},{"location":"sysadmins/monitoring-logging/","title":"Monitoring &amp; Logging","text":"<p>TBD</p>"},{"location":"sysadmins/networking-connectivity/","title":"Networking and Connectivity","text":"<p>TBD</p>"},{"location":"sysadmins/security-reliability-processes/","title":"Security &amp; Reliability Processes","text":"<p>TBD</p>"}]}